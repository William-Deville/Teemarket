{"version":3,"sources":["../../../src/server/models/user.model.js"],"names":["mongoose","require","isEmail","bcrypt","userSchema","Schema","pseudo","type","String","required","minlength","maxlength","unique","trim","email","validate","lowercase","password","max","wishlist","timestamps","statics","login","user","findOne","auth","compare","Error","pre","next","salt","genSalt","hash","UserModel","model","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CACf;AACIC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,SAAS,EAAE,CAHP;AAIJC,IAAAA,SAAS,EAAE,EAJP;AAKJC,IAAAA,MAAM,EAAE,IALJ;AAMJC,IAAAA,IAAI,EAAE;AANF,GADZ;AASIC,EAAAA,KAAK,EAAE;AACHP,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,IAFP;AAGHM,IAAAA,QAAQ,EAAE,CAACb,OAAD,CAHP;AAIHU,IAAAA,MAAM,EAAE,IAJL;AAKHI,IAAAA,SAAS,EAAE,IALR;AAMHH,IAAAA,IAAI,EAAE;AANH,GATX;AAiBII,EAAAA,QAAQ,EAAE;AACNV,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNS,IAAAA,GAAG,EAAE,IAHC;AAINR,IAAAA,SAAS,EAAE;AAJL,GAjBd;AAuBIS,EAAAA,QAAQ,EAAE;AACNZ,IAAAA,IAAI,EAAE,CAACC,MAAD;AADA;AAvBd,CADe,EA4Bf;AACIY,EAAAA,UAAU,EAAE;AADhB,CA5Be,CAAnB;;AAiCAhB,UAAU,CAACiB,OAAX,CAAmBC,KAAnB,GAA2B,gBAAeR,KAAf,EAAsBG,QAAtB,EAAgC;AACvD,QAAMM,IAAI,GAAG,MAAM,KAAKC,OAAL,CAAa;AAAEV,IAAAA;AAAF,GAAb,CAAnB;;AACA,MAAGS,IAAH,EAAS;AACL,UAAME,IAAI,GAAG,MAAMtB,MAAM,CAACuB,OAAP,CAAeT,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAAnB;;AACA,QAAGQ,IAAH,EAAS;AACL,aAAOF,IAAP;AACH;;AACD,UAAMI,KAAK,CAAC,oBAAD,CAAX;AACH;;AACD,QAAMA,KAAK,CAAC,iBAAD,CAAX;AACH,CAVD,C,CAYA;;;AACAvB,UAAU,CAACwB,GAAX,CAAe,MAAf,EAAuB,gBAAeC,IAAf,EAAqB;AACxC,QAAMC,IAAI,GAAG,MAAM3B,MAAM,CAAC4B,OAAP,EAAnB;AACA,OAAKd,QAAL,GAAgB,MAAMd,MAAM,CAAC6B,IAAP,CAAY,KAAKf,QAAjB,EAA2Ba,IAA3B,CAAtB;AACAD,EAAAA,IAAI;AACP,CAJD;AAMA,MAAMI,SAAS,GAAGjC,QAAQ,CAACkC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAlB;AACA+B,MAAM,CAACC,OAAP,GAAiBH,SAAjB","sourcesContent":["const mongoose = require('mongoose');\r\nconst { isEmail } = require('validator');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        pseudo: {\r\n            type: String,\r\n            required: true,\r\n            minlength: 3,\r\n            maxlength: 25,\r\n            unique: true,\r\n            trim: true\r\n        },\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            validate: [isEmail],\r\n            unique: true,\r\n            lowercase: true,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n            max: 1024,\r\n            minlength: 6\r\n        },\r\n        wishlist: {\r\n            type: [String]\r\n        }\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nuserSchema.statics.login = async function(email, password) {\r\n    const user = await this.findOne({ email });\r\n    if(user) {\r\n        const auth = await bcrypt.compare(password, user.password);\r\n        if(auth) {\r\n            return user;\r\n        }\r\n        throw Error('incorrect password');\r\n    }\r\n    throw Error('incorrect email');\r\n}\r\n\r\n//play function before save into display: 'block'\r\nuserSchema.pre(\"save\", async function(next) {\r\n    const salt = await bcrypt.genSalt();\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n    next();\r\n})\r\n\r\nconst UserModel = mongoose.model('user', userSchema);\r\nmodule.exports = UserModel;"],"file":"user.model.js"}